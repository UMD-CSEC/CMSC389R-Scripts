#!/usr/bin/env python2

import argparse
import pygit2
import os
import subprocess
import sys

GIT_LINK_DEFAULT = "https://github.com/UMD-STICS/389Rspring19.git"
GIT_REPO_SLUG = "/389Rspring19.git"
STUDENTS = []

def clone(csvfile):
    # loads student names from .csv and clones repos. Assumes CSV was generated by elink2csv.py
    with open(csvfile, "r") as f:
        for line in f.readlines():
            data = line.split(",")
            s_name = data[0]
            s_git = data[1].strip()

            STUDENTS.append(s_name)

            # make directory for student's repo
            if not os.path.isdir(s_name):
                os.mkdir(s_name)
        
            # clone repo into student's directory if its empty
            if len(os.listdir("%s/%s" % (os.getcwd(), s_name))) == 0:
                try:
                    pygit2.clone_repository(s_git, s_name)
                    print("...cloned repository for %s" % (s_name))
                except pygit2.GitError:
                    # assume if there's an error they only put in their profile link
                    pygit2.clone_repository(s_git + GIT_REPO_SLUG, s_name)
                    print("...cloned repository for %s" % (s_name))
        f.close()

def pull(hw_name, due_date):
    # go into every repository and pull changes
    dirlist = os.listdir(os.getcwd())
    for name in dirlist:
        if not os.path.isdir(name):
            continue
            repo = Repository("%s/.git" % (name))
            print("discovered %s" % (repo.path))
        

def cli():
    parser = argparse.ArgumentParser(prog="GitHandler", description="CLI for automating CMSC389R git submission retrieval.")

    parser.add_argument('-c', metavar="CSV", help="Clones student repos from given CSV file.")
    parser.add_argument('-p', nargs=2, metavar=("HWNAME", "YYYYMMDD"), help='Pulls all student repos with focus on the given assignment and due date.')

    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    return parser.parse_args()

if __name__ == "__main__":
    args = cli()

    if args.c is not None:
        clone(args.c)

    if args.p is not None:
        pull(args.p[0], args.p[1])
